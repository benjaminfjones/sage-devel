# HG changeset patch
# User Benjamin Jones <benjaminfjones@gmail.com>
# Date 1338226746 25200
# Node ID 1ec071c0fbe203a01691db0c827fd5c0a928573e
# Parent  c696547b633b9e159ce921b1aab575b57a803cb0
Trac 13050: add mpmath evaluation to erf

diff --git a/sage/functions/other.py b/sage/functions/other.py
--- a/sage/functions/other.py
+++ b/sage/functions/other.py
@@ -14,8 +14,8 @@
 
 import sage.structure.element
 coercion_model = sage.structure.element.get_coercion_model()
+from sage.structure.coerce import parent as sage_structure_coerce_parent
 
-from sage.structure.coerce import parent
 from sage.symbolic.constants import pi
 from sage.symbolic.function import is_inexact
 from sage.functions.log import exp
@@ -46,6 +46,24 @@
             sage: erf(2).n(200)
             0.99532226501895273416206925636725292861089179704006007673835
 
+        The function supports numerical evaluation using mpmath (default) or PARI::
+
+            sage: erf(2).n(algorithm='pari')
+            0.995322265018953
+            sage: erf(2).n(200, algorithm='pari')
+            0.99532226501895273416206925636725292861089179704006007673835
+
+        WARNING: PARI may overflow if the input to `erf` is too large::
+
+            sage: erf(10**10).n(algorithm='pari')
+            ...
+            PariError:  (15)
+
+        The mpmath library handles large numbers gracefully::
+
+            sage: erf(10**10).n(algorithm='mpmath')
+            1.00000000000000
+
         Complex values can be evaluated as well::
 
             sage: erf(3*I).n()
@@ -101,7 +119,7 @@
         """
         if not isinstance(x, Expression):
             if is_inexact(x):
-                return self._evalf_(x, parent=parent(x))
+                return self._evalf_(x, parent=sage_structure_coerce_parent(x))
             elif x == Integer(0):
                 return Integer(0)
         elif x.is_trivial_zero():
@@ -114,9 +132,13 @@
 
             sage: erf(2).n()
             0.995322265018953
+            sage: erf(2).n(algorithm='pari')
+            0.995322265018953
             sage: erf(2).n(200)
             0.99532226501895273416206925636725292861089179704006007673835
             sage: erf(pi - 1/2*I).n(100)
+            1.0000111669099367825726058952 + 1.6332655417638522934072124547e-6*I
+            sage: erf(pi - 1/2*I).n(100, algorithm='pari')
             1.0000111669099367825726058952 + 1.6332655417638522934072124548e-6*I
 
         TESTS:
@@ -125,16 +147,24 @@
 
             sage: gp.set_real_precision(59)  # random
             38
-            sage: print gp.eval("1 - erfc(1)"); print erf(1).n(200);
+            sage: print gp.eval("1 - erfc(1)"); print erf(1).n(200, algorithm='pari');
             0.84270079294971486934122063508260925929606699796630290845994
             0.84270079294971486934122063508260925929606699796630290845994
         """
-        try:
-            prec = parent.prec()
-        except AttributeError: # not a Sage parent
-            prec = 0
-        return parent(1) - parent(pari(x).erfc(prec))
-        
+        if not algorithm or algorithm == 'mpmath': # default algorithm is 'mpmath'
+            R = parent or sage_structure_coerce_parent(x)
+            import mpmath
+            return mpmath_utils.call(mpmath.erf, x, parent=R)
+        elif algorithm == 'pari':
+            try:
+                prec = parent.prec()
+            except AttributeError: # not a Sage parent
+                prec = 0
+            return parent(1) - parent(pari(x).erfc(prec))
+        else:
+            raise NotImplementedError("erf only supports algorithm = 'mpmath' (default), "\
+                                      "or 'pari'")
+
     def _derivative_(self, x, diff_param=None):
         """
         Derivative of erf function
@@ -850,7 +878,7 @@
         if not isinstance(x, Expression) and not isinstance(y, Expression) and \
                (is_inexact(x) or is_inexact(y)):
             x, y = coercion_model.canonical_coercion(x, y)
-            return self._evalf_(x, y, parent(x))
+            return self._evalf_(x, y, sage_structure_coerce_parent(x))
 
         if y == 0:
             return gamma(x)
@@ -1671,11 +1699,11 @@
 
         """
         if not isinstance(x,Expression): # x contains no variables
-            if parent(x)(0)==x: #compatibility with maxima
-                return parent(x)(0)
+            if sage_structure_coerce_parent(x)(0)==x: #compatibility with maxima
+                return sage_structure_coerce_parent(x)(0)
             else:
                 if is_inexact(x): # inexact complex numbers, e.g. 2.0+i
-                    return self._evalf_(x, parent(x))
+                    return self._evalf_(x, sage_structure_coerce_parent(x))
                 else:  # exact complex numbers, e.g. 2+i
                     return arctan2(imag_part(x),real_part(x))
         else:
@@ -1716,7 +1744,7 @@
             pass
         # try to find a parent that support .arg()
         if parent_d is None:
-            parent_d = parent(x)
+            parent_d = sage_structure_coerce_parent(x)
         try:
             parent_d = parent_d.complex_field()
         except AttributeError:
