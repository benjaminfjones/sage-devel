# HG changeset patch
# User Kevin Halasz <Khalasz@pugetsound.edu>
# Date 1342218100 25200
# Node ID 77c328562d3d30c638d6a9cf24002b320a58f2ec
# Parent  29176fecc5e29648a3ca06345d059d000d2b7e48
13251: Add General dihedral groups

diff --git a/sage/groups/perm_gps/all.py b/sage/groups/perm_gps/all.py
--- a/sage/groups/perm_gps/all.py
+++ b/sage/groups/perm_gps/all.py
@@ -5,7 +5,7 @@
                        DihedralGroup, CyclicPermutationGroup,
                        DiCyclicGroup, TransitiveGroup, PGL, PSL, PSp,PSU,PGU,
                        MathieuGroup, KleinFourGroup, QuaternionGroup,
-                       SuzukiGroup, TransitiveGroups)
+                       SuzukiGroup, TransitiveGroups, GeneralDihedralGroup)
 
 from permgroup import  PermutationGroup, PermutationGroup_generic, PermutationGroup_subgroup, direct_product_permgroups
 
diff --git a/sage/groups/perm_gps/permgroup_named.py b/sage/groups/perm_gps/permgroup_named.py
--- a/sage/groups/perm_gps/permgroup_named.py
+++ b/sage/groups/perm_gps/permgroup_named.py
@@ -12,6 +12,8 @@
 
 -- DihedralGroup, $D_n$ of order $2n$
 
+-- GeneralDihedralGroup, $Dih(G)$, where G is an abelian group
+
 -- CyclicPermutationGroup, $C_n$ of order $n$
 
 -- DiCyclicGroup, nonabelian groups of order `4m` with a unique element of order 2
@@ -749,6 +751,221 @@
         """
         return "Quaternion group of order 8 as a permutation group"
 
+class GeneralDihedralGroup(PermutationGroup_generic):
+    r"""
+    The Generalized Dihedral Group generated by the abelian group with
+    direct factors in the input list.
+
+    INPUT:
+
+    - ``factors`` - a list of the sizes of the cyclic factors of the
+      abelian group being dihedralized (this will be sorted once
+      entered)
+
+    OUTPUT:
+
+    For a given abelian group (noting that each finite abelian group
+    can be represented as the direct product of cyclic groups), the
+    General Dihedral Group it generates is simply the semi-direct
+    product of the given group with `C_2`, where the nonidentity
+    element of `C_2` acts on the abelian group by turning each element
+    into its inverse. In this implementation, each input abelian group
+    will be standardized so as to act on a minimal amount of letters.
+    This will be done by breaking the direct factors into products of
+    p-groups, before this new set of factors is ordered from smallest
+    to largest for complete standardization. Note that the generalized
+    dihedral group corresponding to a cyclic group, `C_n`, is simply
+    the dihedral group `D_n`.
+
+    EXAMPLES:
+
+    As is noted in [1], `Dih(C_3 \times C_3)` has the presentation
+
+    .. MATH::
+
+        \langle a, b, c\mid a^{3}, b^{3}, c^{2}, ab = ba, ac = ca^{-1}, bc = cb^{-1} \rangle
+
+    Note also the fact, verified by [1]_, that the dihedralization of
+    `C_3 \times C_3` is the only nonabelian group of order 18
+    with no element of order 6. ::
+
+        sage: G = GeneralDihedralGroup([3,3])
+        sage: G
+        Generalized dihedral group generated by C3 x C3
+        sage: G.order()
+        18
+        sage: G.gens()
+        [(4,5,6), (2,3)(5,6), (1,2,3)]
+        sage: a = G.gens()[2]; b = G.gens()[0]; c = G.gens()[1]
+        sage: a.order() == 3, b.order() == 3, c.order() == 2
+        (True, True, True)
+        sage: a*b == b*a, a*c == c*a.inverse(), b*c == c*b.inverse()
+        (True, True, True)
+        sage: G.subgroup([a,b,c]) == G
+        True
+        sage: G.is_abelian()
+        False
+        sage: all([x.order() != 6 for x in G])
+        True
+
+    If all of the direct factors are `C_2`, then the action turning
+    each element into its inverse is trivial, and the semi-direct
+    product becomes a direct product. ::
+
+        sage: G = GeneralDihedralGroup([2,2,2])
+        sage: G.order()
+        16
+        sage: G.gens()
+        [(7,8), (5,6), (3,4), (1,2)]
+        sage: G.is_abelian()
+        True
+        sage: H = KleinFourGroup()
+        sage: G.is_isomorphic(H.direct_product(H)[0])
+        True
+
+    If two nonidentical input lists generate isomorphic abelian
+    groups, then they will generate identical groups (with each direct
+    factor broken up into its prime factors), but they will still have
+    distinct descriptions. Note that If `gcd(n,m)=1`, then `C_n \times
+    C_m \cong C_{nm}`, while the general dihedral groups
+    generated by isomorphic abelian groups should be themselves
+    isomorphic. ::
+
+        sage: G = GeneralDihedralGroup([6,34,46,14])
+        sage: H = GeneralDihedralGroup([7,17,3,46,2,2,2])
+        sage: G == H, G.gens() == H.gens()
+        (True, True)
+        sage: [x.order() for x in G.gens()]
+        [23, 17, 7, 2, 3, 2, 2, 2, 2]
+        sage: G
+        Generalized dihedral group generated by C6 x C34 x C46 x C14
+        sage: H
+        Generalized dihedral group generated by C7 x C17 x C3 x C46 x C2 x C2 x C2
+
+    A cyclic input yields a Classical Dihedral Group. ::
+
+        sage: G = GeneralDihedralGroup([6])
+        sage: D = DihedralGroup(6)
+        sage: G.is_isomorphic(D)
+        True
+
+    A Generalized Dihedral Group will always have size twice the
+    underlying group, be solvable (as it has an abelian subgroup with
+    index 2), and, unless the underlying group is of the form
+    `{C_2}^n`, be nonabelian (by the structure theorem of finite
+    abelian groups and the fact that a semi-direct product is a
+    direct product only when the underlying action is trivial). ::
+
+        sage: G = GeneralDihedralGroup([6,18,33,60])
+        sage: (6*18*33*60)*2
+        427680
+        sage: G.order()
+        427680
+        sage: G.is_solvable()
+        True
+        sage: G.is_abelian()
+        False
+
+    TESTS::
+
+        sage: G = GeneralDihedralGroup("foobar")
+        Traceback (most recent call last):
+        ...
+        TypeError: factors of abelian group must be a list, not foobar
+
+        sage: GeneralDihedralGroup([])
+        Traceback (most recent call last):
+        ...
+        ValueError: there must be at least one direct factor in the abelian group being dihedralized
+
+        sage: GeneralDihedralGroup([3, 1.5])
+        Traceback (most recent call last):
+        ...
+        TypeError: the input list must contain all Integers
+
+        sage: GeneralDihedralGroup([4, -8])
+        Traceback (most recent call last):
+        ...
+        ValueError: all direct factors must be greater than 1
+
+    REFERENCES:
+
+    .. [1] A.D. Thomas and G.V. Wood, Group Tables (Exeter: Shiva Publishing, 1980)
+
+    AUTHOR:
+
+    - Kevin Halasz (2012-7-12)
+
+    """
+    def __init__(self, factors):
+        r"""
+        Init method of class <GeneralDihedralGroup>. See the docstring
+        for :class:`<GeneralDihedralGroup>`.
+
+        EXAMPLES::
+            sage: G = GeneralDihedralGroup([5,5,5])
+            sage: G.order()
+            250
+            sage: TestSuite(G).run()
+        """
+
+
+        if not isinstance(factors, list):
+            msg = "factors of abelian group must be a list, not {}"
+            raise TypeError(msg.format(factors))
+
+        if len(factors) < 1:
+            raise ValueError, 'there must be at least one direct factor in the abelian group being dihedralized'
+
+        if not all(isinstance(x, Integer) for x in factors):
+            raise TypeError, 'the input list must contain all Integers'
+
+        if not all(x >= 2 for x in factors):
+            s = 'all direct factors must be greater than 1'
+            raise ValueError, s
+
+        self.factors = factors
+        # To get uniform outputs for isomorphic inputs, we break
+        # each inputted cyclic group into a direct product of cyclic
+        # p-groups
+        simplified = [term[0]**term[1] for a in factors for term in a.factor()]
+        simplified.sort()
+
+        gens = []
+        # genx is an element of order two that turns each of the
+        # generators of the abelian group into its inverse via
+        # conjugation
+        genx = []
+        jumppoint = Integer(1)
+        for a in simplified:
+            # create one of the generators for the abelian group
+            gens.append([tuple(range(jumppoint, jumppoint+a))])
+            # make contribution to the generator that dihedralizes the
+            # abelian group
+            for i in range(1, (a//2)+1):
+                genx.append(tuple((jumppoint+i, jumppoint+a-i)))
+            jumppoint = jumppoint + a
+        # If all of the direct factors are C2, then the action turning
+        # each element into its inverse is trivial, and the
+        # semi-direct product becomes a direct product, so we simply
+        # tack on another disjoint transposition
+        if all(x==2 for x in simplified):
+            genx.append(tuple((jumppoint, jumppoint+1)))
+        gens.append(genx)
+        PermutationGroup_generic.__init__(self, gens=gens)
+
+    def _repr_(self):
+        r"""
+        EXAMPLES::
+            sage: G = GeneralDihedralGroup([2,4,8])
+            sage: G
+            Generalized dihedral group generated by C2 x C4 x C8
+        """
+        grouplist = []
+        for n in self.factors:
+            grouplist.append('C{}'.format(n))
+        return 'Generalized dihedral group generated by ' + ' x '.join(grouplist)
+
 class DihedralGroup(PermutationGroup_unique):
     def __init__(self, n):
         """
@@ -827,6 +1044,8 @@
         """
         return "Dihedral group of order %s as a permutation group"%self.order()
 
+
+
 class MathieuGroup(PermutationGroup_unique):
     def __init__(self, n):
         """
