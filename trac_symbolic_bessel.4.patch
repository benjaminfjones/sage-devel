# HG changeset patch
# User Benjamin Jones <benjaminfjones@gmail.com>
# Date 1353290089 28800
# Node ID a5dd7351f678d71592f6a8a37ccc4527c2d411e5
# Parent  d06cf4b2215d37d3a87a58f65ac53234502dd471
[mq]: trac_symbolic_bessel

diff --git a/sage/functions/special.py b/sage/functions/special.py
--- a/sage/functions/special.py
+++ b/sage/functions/special.py
@@ -384,11 +384,15 @@
 from sage.plot.plot import plot
 from sage.rings.real_mpfr import RealField
 from sage.rings.complex_field import ComplexField
-from sage.misc.sage_eval import sage_eval
 from sage.rings.all import ZZ, RR, RDF
 from sage.functions.other import real, imag, log_gamma
-from sage.symbolic.function import BuiltinFunction
+from sage.symbolic.function import BuiltinFunction, is_inexact
+from sage.symbolic.expression import Expression
+from sage.structure.coerce import parent
+import sage.structure.element
 from sage.calculus.calculus import maxima
+from sage.libs.mpmath import utils as mpmath_utils
+from sage.misc.sage_eval import sage_eval
 
 _done = False
 def _init():
@@ -968,13 +972,15 @@
         raise NotImplementedError, "The Y-Bessel function is only implemented for the maxima and scipy algorithms"
     else:
         raise ValueError, "unknown algorithm '%s'"%algorithm
-    
-class Bessel():
+
+
+
+class Bessel(BuiltinFunction):
     """
     A class implementing the I, J, K, and Y Bessel functions.
-    
+
     EXAMPLES::
-    
+
         sage: g = Bessel(2); g
         J_{2}
         sage: print g
@@ -992,22 +998,28 @@
         sage: Bessel(2, typ='Y')(pi)
         -0.0999007139289404
     """
-    def __init__(self, nu, typ = "J", algorithm = None, prec = 53):
+
+    # conversions dictionary for the Bessel function
+    _conversions_dict = { 'I': { 'maxima': 'bessel_i', 'mathematica': 'BesselI' }
+                        , 'J': { 'maxima': 'bessel_j', 'mathematica': 'BesselJ' }
+                        , 'K': { 'maxima': 'bessel_k', 'mathematica': 'BesselK' }
+                        , 'Y': { 'maxima': 'bessel_y', 'mathematica': 'BesselY' } }
+
+    def __init__(self, *args, **kwds):
         """
         Initializes new instance of the Bessel class.
 
         INPUT:
 
-         - ``typ`` -- (default: J) the type of Bessel function: 'I', 'J', 'K'
-           or 'Y'.
+         - ``order`` -- (optional positional argument) The order of the Bessel
+                        function. This should be a non-negative integer.
 
-         - ``algorithm`` -- (default: maxima for type Y, pari for other types)
-           algorithm to use to compute the Bessel function: 'pari', 'maxima' or
-           'scipy'.  Note that type K is not implemented in Maxima and type Y
-           is not implemented in PARI.
+         - ``typ`` -- (optional keyword argument, default: 'J') The type of Bessel
+                      function: 'I', 'J', 'K', or 'Y'.
 
-         - ``prec`` -- (default: 53) precision in bits of the Bessel function.
-           Only supported for the PARI algorithm.
+         - ``algorithm`` -- (optional keyword argument) This keyword specifies the
+                            numerical evaluation back end. For now only 'mpmath' is
+                            supported.
 
         EXAMPLES::
 
@@ -1044,47 +1056,148 @@
             ...
             ValueError: typ must be one of I, J, K, Y
         """
-        if not (typ in ['I', 'J', 'K', 'Y']):
-            raise ValueError, "typ must be one of I, J, K, Y"
+        # determine the order and type of function from the arguments and keywords
+        if 'typ' in kwds:
+            self._type = kwds['typ']
+        else:
+            self._type = 'J'
 
-        # Did the user ask for the default algorithm?
-        if algorithm is None:
-            if typ == 'Y':
-                algorithm = 'maxima'
-            else:
-                algorithm = 'pari'
+        if len(args) == 0: # no order specified
+            self._order = None
+            self._nargs = 2
+            self._name = "bessel_%s" % self._type
+            self._latex_name = r"bessel\_%s" % self._type
+        elif len(args) == 1: # order is specified
+            self._order = args[0]
+            self._nargs = 1
+            self._name = "bessel_{%s,%s}" % (self._order, self._type)
+            self._latex_name = r"bessel\_\{%s,%s\}" % (self._order, self._type)
+        elif len(args) == 2: # both order and typ are positional arguments
+            self._order = args[0]
+            self._type = args[1]
+            self._nargs = 1
+            self._name = "bessel_{%s,%s}" % (self._order, self._type)
+            self._latex_name = r"bessel\_\{%s,%s\}" % (self._order, self._type)
 
-        self._system = algorithm
-        self._order = nu
-        self._type = typ
-        prec = int(prec)
-        if prec < 0:
-            raise ValueError, "prec must be a positive integer"
-        self._prec = int(prec)
+        else:
+            raise TypeError("at most two positional arguments may be specified, "
+                           +"see the docstring for Bessel")
 
-    def __str__(self):
+        # check the function type
+        if not (self._type in ['I', 'J', 'K', 'Y']):
+            raise ValueError, "self._type must be one of I, J, K, Y"
+
+        # record the numerical evaluation system
+        if 'algorithm' in kwds:
+            self._system = kwds['algorithm']
+        else:
+            self._system = 'mpmath'
+
+        # determine the numerical evaluation method
+        if self._system == 'mpmath':
+            self._evalf_func = self._gen_mpmath_evalf()
+        elif self._system == 'maxima':
+            raise NotImplementedError("maxima evaluation is not implemented yet")
+        elif self._system == 'scipy':
+            raise NotImplementedError("scipy evaluation is not implemented yet")
+        else:
+            raise NotImplementedError("unknown algorithm specified")
+
+        # conversions are only defined when the index is
+        # unspecified since the Bessel functions in Maxima take two parameters:
+        # the index and the argument.
+        if self._nargs == 2:
+            self._conversions = self._conversions_dict[self._type]
+        else:
+            self._conversions = {}
+
+        # initialize the superclass
+        BuiltinFunction.__init__(self, self._name, nargs=self._nargs,
+                                 latex_name=self._latex_name,
+                                 conversions=self._conversions)
+
+    def _gen_mpmath_evalf(self):
         """
-        Returns a string representation of this Bessel object.
+        Generates the correct numerical eval function from mpmath once self._type
+        and self._nargs are initialized.
 
-        TEST::
+        EXAMPLES::
+            sage: #TODO
+        """
+        import mpmath
+        # numerical evaluation functions from mpmath for Bessel_?
+        mpmath_bessel_functions = { 'I': mpmath.besseli, 'J': mpmath.besselj,
+                                    'K': mpmath.besselk, 'Y': mpmath.bessely }
+        mpf = mpmath_bessel_functions[self._type]
 
-            sage: a = Bessel(1,'I')
-            sage: str(a)
-            'I-Bessel function of order 1'
+        if self._nargs == 1:
+            def f(self, z, **kwds):
+                return mpmath_utils.call(mpf, self._order, z, **kwds)
+        else:
+            def f(self, n, z, **kwds):
+                return mpmath_utils.call(mpf, n, z, **kwds)
+        return f
+
+
+    def _eval_(self, *args):
         """
-        return self.type()+"-Bessel function of order "+str(self.order())
-    
-    def __repr__(self):
+        EXAMPLES::
         """
-        Returns a string representation of this Bessel object.
+        if (len(args) == 1 and
+           (not isinstance(args[0], Expression) and is_inexact(args[0]))):
+                return self._evalf_(args[0], parent=parent(args[0]))
+        elif (len(args) == 2 and
+             (not isinstance(args[0], Expression) and
+             not isinstance(args[1], Expression) and
+             (is_inexact(args[0]) or is_inexact(args[1])))):
+                coercion_model = sage.structure.element.get_coercion_model()
+                n, z = coercion_model.canonical_coercion(*args)
+                return self._evalf_(n, z, parent=parent(n))
+        return None # leaves the expression unevaluated
 
-        TESTS::
+    def _evalf_(self, *args, **kwds):
+        """
+        EXAMPLES::
 
-            sage: Bessel(1,'I')
-            I_{1}
+            sage: f = Bessel(); f(0, 3.0)
+            -0.260051954901933
+            sage: f(0, 3).n(100)
+            -0.26005195490193343762415469598
+            sage: Bessel(1, 'Y')(3).n(100)
+            0.32467442479179997843701283929
+            sage: Bessel(1, 'I')(3).n(100)
+
         """
-        return self.type()+"_{"+str(self.order())+"}"
-    
+        return self._evalf_func(self, *args, **kwds)
+
+    def _derivative_(self, n, z, diff_param=None):
+        """
+        """
+        pass # TODO
+
+#    def __str__(self):
+#        """
+#        Returns a string representation of this Bessel object.
+#
+#        TEST::
+#
+#            sage: a = Bessel(1,'I')
+#            sage: str(a)
+#            'I-Bessel function of order 1'
+#        """
+#        return self.type()+"-Bessel function of order "+str(self.order())
+#
+#    def __repr__(self):
+#        """
+#        Returns a string representation of this Bessel object.
+#
+#        TESTS::
+#
+#            sage: Bessel(1,'I')
+#            I_{1}
+#        """
+#        return self.type()+"_{"+str(self.order())+"}"
+
     def type(self):
         """
         Returns the type of this Bessel object.
@@ -1096,7 +1209,7 @@
             'K'
         """
         return self._type
-    
+
     def prec(self):
         """
         Returns the precision (in number of bits) used to represent this
@@ -1139,72 +1252,76 @@
             'pari'
         """
         return self._system
+#
+#    def __call__(self,z):
+#        """
+#        Implements evaluation of all the Bessel functions directly
+#        from the Bessel class. This essentially allows a Bessel object to
+#        behave like a function that can be invoked.
+#
+#        TESTS::
+#
+#            sage: Bessel(3,'K')(5.0)
+#            0.00829176841523093
+#            sage: Bessel(20,algorithm='maxima')(5.0)
+#            2.77033005213e-11
+#            sage: Bessel(20,prec=100)(5.0101010101010101)
+#            2.8809188227195382093062257967e-11
+#            sage: B = Bessel(2,'Y',algorithm='scipy',prec=50)
+#            sage: B(2.0)
+#            Traceback (most recent call last):
+#            ...
+#            ValueError: for the scipy algorithm the precision must be 53
+#        """
+#        nu = self.order()
+#        t = self.type()
+#        s = self.system()
+#        p = self.prec()
+#        if t == "I":
+#            return bessel_I(nu,z,algorithm=s,prec=p)
+#        if t == "J":
+#            return bessel_J(nu,z,algorithm=s,prec=p)
+#        if t == "K":
+#            return bessel_K(nu,z,algorithm=s,prec=p)
+#        if t == "Y":
+#            return bessel_Y(nu,z,algorithm=s,prec=p)
+#        
+#    def plot(self,a,b):
+#        """
+#        Enables easy plotting of all the Bessel functions directly
+#        from the Bessel class.
+#
+#        TESTS::
+#
+#            sage: plot(Bessel(2),3,4)
+#            sage: Bessel(2).plot(3,4)
+#            sage: P = Bessel(2,'I').plot(1,5)
+#            sage: P += Bessel(2,'J').plot(1,5)
+#            sage: P += Bessel(2,'K').plot(1,5)
+#            sage: P += Bessel(2,'Y').plot(1,5)
+#            sage: show(P)
+#        """
+#        nu = self.order()
+#        s = self.system()
+#        t = self.type()
+#        if t == "I":
+#            f = lambda z: bessel_I(nu,z,s)  
+#            P = plot(f,a,b)
+#        if t == "J":
+#            f = lambda z: bessel_J(nu,z,s)
+#            P = plot(f,a,b)
+#        if t == "K":
+#            f = lambda z: bessel_K(nu,z,s)
+#            P = plot(f,a,b)
+#        if t == "Y":
+#            f = lambda z: bessel_Y(nu,z,s)
+#            P = plot(f,a,b)
+#        return P
 
-    def __call__(self,z):
-        """
-        Implements evaluation of all the Bessel functions directly
-        from the Bessel class. This essentially allows a Bessel object to
-        behave like a function that can be invoked.
+# TODO: bessel_X initialization
+# Q: should the order be specified at init time, or a parameter?
+#bessel_J = Bessel(...
 
-        TESTS::
-
-            sage: Bessel(3,'K')(5.0)
-            0.00829176841523093
-            sage: Bessel(20,algorithm='maxima')(5.0)
-            2.77033005213e-11
-            sage: Bessel(20,prec=100)(5.0101010101010101)
-            2.8809188227195382093062257967e-11
-            sage: B = Bessel(2,'Y',algorithm='scipy',prec=50)
-            sage: B(2.0)
-            Traceback (most recent call last):
-            ...
-            ValueError: for the scipy algorithm the precision must be 53
-        """
-        nu = self.order()
-        t = self.type()
-        s = self.system()
-        p = self.prec()
-        if t == "I":
-            return bessel_I(nu,z,algorithm=s,prec=p)
-        if t == "J":
-            return bessel_J(nu,z,algorithm=s,prec=p)
-        if t == "K":
-            return bessel_K(nu,z,algorithm=s,prec=p)
-        if t == "Y":
-            return bessel_Y(nu,z,algorithm=s,prec=p)
-        
-    def plot(self,a,b):
-        """
-        Enables easy plotting of all the Bessel functions directly
-        from the Bessel class.
-
-        TESTS::
-
-            sage: plot(Bessel(2),3,4)
-            sage: Bessel(2).plot(3,4)
-            sage: P = Bessel(2,'I').plot(1,5)
-            sage: P += Bessel(2,'J').plot(1,5)
-            sage: P += Bessel(2,'K').plot(1,5)
-            sage: P += Bessel(2,'Y').plot(1,5)
-            sage: show(P)
-        """
-        nu = self.order()
-        s = self.system()
-        t = self.type()
-        if t == "I":
-            f = lambda z: bessel_I(nu,z,s)  
-            P = plot(f,a,b)
-        if t == "J":
-            f = lambda z: bessel_J(nu,z,s)
-            P = plot(f,a,b)
-        if t == "K":
-            f = lambda z: bessel_K(nu,z,s)
-            P = plot(f,a,b)
-        if t == "Y":
-            f = lambda z: bessel_Y(nu,z,s)
-            P = plot(f,a,b)
-        return P
-    
 def hypergeometric_U(alpha,beta,x,algorithm="pari",prec=53):
     r"""
     Default is a wrap of PARI's hyperu(alpha,beta,x) function.
