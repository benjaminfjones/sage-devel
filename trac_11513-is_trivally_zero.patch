# HG changeset patch
# User Burcin Erocal <burcin@erocal.org>
# Date 1326148050 -3600
#11513: add a method to check if a symbolic expression is trivially zero.

diff --git a/sage/symbolic/expression.pyx b/sage/symbolic/expression.pyx
--- a/sage/symbolic/expression.pyx
+++ b/sage/symbolic/expression.pyx
@@ -1678,6 +1678,44 @@
 
     rhs = right = right_hand_side
 
+    def is_trivially_zero(self):
+        """
+        Check if this expression is trivially equal to zero without any
+        simplification.
+
+        This method is intended to be used in library code where trying to
+        obtain a mathematically correct result by applying potentially
+        expensive rewrite rules is not desirable.
+
+        EXAMPLES::
+
+            sage: SR(0).is_trivially_zero()
+            True
+            sage: SR(0.0).is_trivially_zero()
+            True
+            sage: SR(float(0.0)).is_trivially_zero()
+            True
+
+            sage: (SR(1)/2^1000).is_trivially_zero()
+            False
+            sage: SR(1./2^10000).is_trivially_zero()
+            False
+
+        The :meth:`is_zero` method is more capable::
+
+            sage: t = pi + (pi - 1)*pi - pi^2
+            sage: t.is_trivially_zero()
+            False
+            sage: t.is_zero()
+            True
+            sage: u = sin(x)^2 + cos(x)^2 - 1
+            sage: u.is_trivially_zero()
+            False
+            sage: u.is_zero()
+            True
+        """
+        return self._gobj.is_zero()
+
     def __nonzero__(self):
         """
         Return True unless this symbolic expression can be shown by Sage

