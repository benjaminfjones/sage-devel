# HG changeset patch
# User D. S. McNeil <dsm054@gmail.com>
# Date 1323918743 18000
# Node ID 9f4ba170a9ae70eb00075582599b95484be44085
# Parent  c239be1054e01526a1b0b62da6691061b9dd5587
Trac #10164: round up log(10,2) approximations

diff --git a/sage/misc/functional.py b/sage/misc/functional.py
--- a/sage/misc/functional.py
+++ b/sage/misc/functional.py
@@ -1254,12 +1254,29 @@
         Algebraic Field
         sage: [a.n() for a in E]
         [18.1681536508882, -0.0840768254441065 - 0.219026148480291*I, -0.0840768254441065 + 0.219026148480291*I]
+
+    Make sure we've rounded up log(10,2) enough to guarantee
+    sufficient precision (trac #10164)::
+
+        sage: ks = 4*10**5, 10**6
+        sage: check_str_length = lambda k: len(str(numerical_approx(1+10**-k,digits=k+1)))-1 >= k+1
+        sage: check_precision = lambda k: numerical_approx(1+10**-k,digits=k+1)-1 > 0
+        sage: all(check_str_length(k) and check_precision(k) for k in ks)
+        True
+
+    Testing we have sufficient precision for the golden ratio (trac #12163):
+
+        sage: len(str(n(golden_ratio, digits=5000)))
+        5001
+        sage: len(str(n(golden_ratio, digits=5000000)))
+        5000001
+
     """
     if prec is None:
         if digits is None:
             prec = 53
         else:
-            prec = int((digits+1) * 3.32192) + 1
+            prec = int((digits+1) * 3.321928094887363) + 1
     try:
         return x._numerical_approx(prec)
     except AttributeError:
diff --git a/sage/rings/complex_interval.pyx b/sage/rings/complex_interval.pyx
--- a/sage/rings/complex_interval.pyx
+++ b/sage/rings/complex_interval.pyx
@@ -73,7 +73,6 @@
         cdef real_mpfi.RealIntervalFieldElement rr, ii
         self._parent = parent
         self._prec = self._parent._prec
-
         mpfi_init2(self.__re, self._prec)
         mpfi_init2(self.__im, self._prec)
         
@@ -1191,6 +1190,7 @@
     (controlled by pad) bits than given by s.
 
     INPUT:
+
         s_real -- a string that defines a real number (or something whose
                   string representation defines a number)
         s_imag -- a string that defines a real number (or something whose
@@ -1199,6 +1199,7 @@
         min_prec -- number will have at least this many bits of precision, no matter what.
 
     EXAMPLES:
+
         sage: ComplexIntervalFieldElement('2.3')
         2.300000000000000?
         sage: ComplexIntervalFieldElement('2.3','1.1')
@@ -1213,6 +1214,24 @@
         1 + 2*I
         sage: ComplexIntervalFieldElement(1.234567890123456789012345, 5.4321098654321987654321)
         1.234567890123456789012350? + 5.432109865432198765432000?*I
+
+    TESTS:
+
+    Make sure we've rounded up log(10,2) enough to guarantee
+    sufficient precision (trac #10164).  This is a little tricky
+    because at the time of writing, we don't support intervals long
+    enough to trip the error.  However, at least we can make sure that
+    we either do it correctly or fail noisily::
+
+        sage: c_CIFE = sage.rings.complex_interval.create_ComplexIntervalFieldElement
+        sage: for kp in range(2,6):
+        ...       s = '1.' + '0'*10**kp + '1'
+        ...       try:
+        ...           assert c_CIFE(s,0).real()-1 != 0
+        ...           assert c_CIFE(0,s).imag()-1 != 0
+        ...       except TypeError:
+        ...           pass
+
     """
     if s_imag is None:
         s_imag = 0
@@ -1222,10 +1241,9 @@
     if not isinstance(s_imag, str):
         s_imag = str(s_imag).strip()
     #if base == 10:
-    bits = max(int(3.32192*len(s_real)),int(3.32192*len(s_imag)))
+    bits = max(int(3.321928094887363*len(s_real)),int(3.321928094887363*len(s_imag)))
     #else:
     #    bits = max(int(math.log(base,2)*len(s_imag)),int(math.log(base,2)*len(s_imag)))
         
     C = complex_interval_field.ComplexIntervalField(prec=max(bits+pad, min_prec))
-        
     return ComplexIntervalFieldElement(C, s_real, s_imag)
diff --git a/sage/rings/complex_number.pyx b/sage/rings/complex_number.pyx
--- a/sage/rings/complex_number.pyx
+++ b/sage/rings/complex_number.pyx
@@ -2228,6 +2228,18 @@
     
         sage: sage.rings.complex_number.create_ComplexNumber(s_real=2,s_imag=1)
         2.00000000000000 + 1.00000000000000*I
+
+    TESTS:
+
+    Make sure we've rounded up log(10,2) enough to guarantee
+    sufficient precision (trac #10164)::
+
+        sage: s = "1." + "0"*10**6 + "1"
+        sage: sage.rings.complex_number.create_ComplexNumber(s,0).real()-1 == 0
+        False
+        sage: sage.rings.complex_number.create_ComplexNumber(0,s).imag()-1 == 0
+        False
+
     """
     if s_imag is None:
         s_imag = 0
@@ -2237,7 +2249,7 @@
     if not isinstance(s_imag, str):
         s_imag = str(s_imag).strip()
     #if base == 10:
-    bits = max(int(3.32192*len(s_real)),int(3.32192*len(s_imag)))
+    bits = max(int(3.321928094887363*len(s_real)),int(3.321928094887363*len(s_imag)))
     #else:
     #    bits = max(int(math.log(base,2)*len(s_imag)),int(math.log(base,2)*len(s_imag)))
         
diff --git a/sage/rings/real_mpfi.pyx b/sage/rings/real_mpfi.pyx
--- a/sage/rings/real_mpfi.pyx
+++ b/sage/rings/real_mpfi.pyx
@@ -4398,13 +4398,31 @@
         1.23456789012345678901234567890123450?
         sage: RealInterval(29308290382930840239842390482, 3^20).str(style='brackets')
         '[3.48678440100000000000000000000e9 .. 2.93082903829308402398423904820e28]'
+
+    TESTS:
+
+    Make sure we've rounded up log(10,2) enough to guarantee
+    sufficient precision (trac #10164).  This is a little tricky
+    because at the time of writing, we don't support intervals long
+    enough to trip the error.  However, at least we can make sure
+    that we either do it correctly or fail noisily::
+
+        sage: ks = 5*10**5, 10**6
+        sage: for k in ks:
+        ...      try:
+        ...          z = RealInterval("1." + "1"*k)
+        ...          assert len(str(z))-4 >= k
+        ...      except TypeError:
+        ...          pass
+
     """
     if not isinstance(s, str):
         s = str(s)
     if base == 10:
-        bits = int(3.32192*len(s))
+        # hard-code the common case
+        bits = int(3.321928094887363*len(s))
     else:
-        bits = int(math.log(base,2)*len(s))
+        bits = int(math.log(base,2)*1.00001*len(s))
     R = RealIntervalField(prec=max(bits+pad, min_prec))
     return R(s, upper, base)
 
diff --git a/sage/rings/real_mpfr.pyx b/sage/rings/real_mpfr.pyx
--- a/sage/rings/real_mpfr.pyx
+++ b/sage/rings/real_mpfr.pyx
@@ -4916,6 +4916,14 @@
         53
         sage: RealNumber('-.000000000000000000000000000000001').prec()
         53
+
+    Make sure we've rounded up log(10,2) enough to guarantee
+    sufficient precision (trac #10164)::
+
+        sage: ks = 5*10**5, 10**6
+        sage: all(RealNumber("1." + "0"*k +"1")-1 > 0 for k in ks)
+        True
+
     """
     if not isinstance(s, str):
         s = str(s)
@@ -4939,14 +4947,15 @@
             if mantissa[i] != '.' and mantissa[i] != '0' and mantissa[i] != '-':
                 sigfigs = len(mantissa) - i
                 break
-        
+
         if '.' in mantissa and mantissa[:2] != '0.':
             sigfigs -= 1
         
         if base == 10:
-            bits = int(3.32192*sigfigs)+1
+            # hard-code the common case
+            bits = int(3.321928094887363*sigfigs)+1
         else:
-            bits = int(math.log(base,2)*sigfigs)+1
+            bits = int(math.log(base,2)*1.00001*sigfigs)+1
 
         R = RealField(prec=max(bits+pad, min_prec), rnd=rnd)
         
diff --git a/sage/symbolic/expression.pyx b/sage/symbolic/expression.pyx
--- a/sage/symbolic/expression.pyx
+++ b/sage/symbolic/expression.pyx
@@ -4026,12 +4026,20 @@
             Traceback (most recent call last):
             ...
             TypeError: cannot evaluate symbolic expression numerically
+
+        Make sure we've rounded up log(10,2) enough to guarantee
+        sufficient precision (trac #10164)::
+
+            sage: ks = 4*10**5, 10**6
+            sage: all(len(str(e.n(digits=k)))-1 >= k for k in ks)
+            True
+
         """
         if prec is None:
             if digits is None:
                 prec = 53
             else:
-                prec = int((digits+1) * 3.32192) + 1
+                prec = int((digits+1) * 3.321928094887363) + 1
         from sage.rings.real_mpfr import RealField
         R = RealField(prec)
         cdef Expression x
